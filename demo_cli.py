"""
Demo CLI cho Memory Chatbot
"""
import os
from chatbot import MemoryChatbot

def print_banner():
    """In banner ch√†o m·ª´ng"""
    print("=" * 60)
    print("ü§ñ MEMORY CHATBOT DEMO - CLI VERSION")
    print("Chatbot th√¥ng minh v·ªõi b·ªô nh·ªõ l√¢u d√†i")
    print("S·ª≠ d·ª•ng Google Gemini l√†m core")
    print("=" * 60)

def setup_api_key():
    """Thi·∫øt l·∫≠p API key"""
    if not os.getenv("GOOGLE_API_KEY"):
        print("\n‚ö†Ô∏è  Ch∆∞a c√≥ Google API Key trong environment")
        api_key = input("Nh·∫≠p Google API Key: ").strip()
        if api_key:
            os.environ["GOOGLE_API_KEY"] = api_key
            print("‚úÖ ƒê√£ thi·∫øt l·∫≠p API key")
        else:
            print("‚ùå Kh√¥ng th·ªÉ ti·∫øp t·ª•c m√† kh√¥ng c√≥ API key")
            print("L·∫•y API key t·∫°i: https://makersuite.google.com/app/apikey")
            return False
    else:
        print("‚úÖ ƒê√£ c√≥ Google API Key")
    return True

def get_user_info():
    """L·∫•y th√¥ng tin ng∆∞·ªùi d√πng"""
    print("\nüìù Th√¥ng tin ng∆∞·ªùi d√πng:")
    user_id = input("User ID (m·∫∑c ƒë·ªãnh: demo_user): ").strip() or "demo_user"
    session_id = input("Session ID (m·∫∑c ƒë·ªãnh: default): ").strip() or "default"
    return user_id, session_id

def show_menu():
    """Hi·ªÉn th·ªã menu"""
    print("\n" + "‚îÄ" * 50)
    print("MENU:")
    print("1. Chat v·ªõi bot")
    print("2. Xem th√¥ng tin memory")
    print("3. T√¨m ki·∫øm trong memory")
    print("4. X√≥a memory session")
    print("5. X√≥a t·∫•t c·∫£ memory")
    print("6. Tho√°t")
    print("‚îÄ" * 50)

def chat_mode(chatbot):
    """Ch·∫ø ƒë·ªô chat"""
    print("\nüí¨ CH·∫æ ƒë·ªô CHAT")
    print("G√µ 'exit' ƒë·ªÉ quay l·∫°i menu ch√≠nh")
    print("‚îÄ" * 30)
    
    while True:
        try:
            user_input = input("\nüë§ B·∫°n: ").strip()
            
            if user_input.lower() in ['exit', 'quit', 'back']:
                break
            
            if not user_input:
                continue
            
            print("ü§ñ Bot: ", end="")
            response = chatbot.chat(user_input)
            print(response)
            
        except KeyboardInterrupt:
            print("\n\nQuay l·∫°i menu ch√≠nh...")
            break
        except Exception as e:
            print(f"\n‚ùå L·ªói: {e}")

def show_memory_info(chatbot):
    """Hi·ªÉn th·ªã th√¥ng tin memory"""
    try:
        print("\nüìä TH√îNG TIN MEMORY")
        print("‚îÄ" * 30)
        
        memory_info = chatbot.get_memory_summary()
        
        print(f"User ID: {memory_info['user_id']}")
        print(f"Session ID: {memory_info['session_id']}")
        print(f"T·ªïng s·ªë tin nh·∫Øn: {memory_info['total_messages']}")
        print(f"T·ªïng s·ªë entities: {memory_info['total_entities']}")
        print(f"T·ªïng s·ªë vector memories: {memory_info['total_vector_memories']}")
        
        if memory_info['entities']:
            print("\nüìã TH√îNG TIN C√Å NH√ÇN:")
            for entity, facts in memory_info['entities'].items():
                print(f"  {entity}: {', '.join(facts)}")
        
        if memory_info['conversation_summary']:
            print("\nüí≠ T√ìM T·∫ÆT CU·ªòC TR√í CHUY·ªÜN:")
            print(memory_info['conversation_summary'][:500] + "..." if len(memory_info['conversation_summary']) > 500 else memory_info['conversation_summary'])
        
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y th√¥ng tin memory: {e}")

def search_memory(chatbot):
    """T√¨m ki·∫øm trong memory"""
    try:
        query = input("\nüîç Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm: ").strip()
        if not query:
            return
        
        print("ƒêang t√¨m ki·∫øm...")
        results = chatbot.search_memory(query)
        
        print("\nüìã K·∫æT QU·∫¢ T√åM KI·∫æM:")
        print("‚îÄ" * 30)
        print(results)
        
    except Exception as e:
        print(f"‚ùå L·ªói khi t√¨m ki·∫øm: {e}")

def clear_session_memory(chatbot):
    """X√≥a memory session"""
    confirm = input("\n‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a memory session? (y/N): ").strip().lower()
    if confirm == 'y':
        try:
            chatbot.clear_session()
            print("‚úÖ ƒê√£ x√≥a memory session")
        except Exception as e:
            print(f"‚ùå L·ªói khi x√≥a memory: {e}")

def clear_all_memory(chatbot):
    """X√≥a t·∫•t c·∫£ memory"""
    confirm = input("\n‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a T·∫§T C·∫¢ memory? (y/N): ").strip().lower()
    if confirm == 'y':
        try:
            chatbot.clear_all_memory()
            print("‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ memory")
        except Exception as e:
            print(f"‚ùå L·ªói khi x√≥a memory: {e}")

def main():
    """H√†m main"""
    print_banner()
    
    # Thi·∫øt l·∫≠p API key
    if not setup_api_key():
        return
    
    # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    user_id, session_id = get_user_info()
    
    # Kh·ªüi t·∫°o chatbot
    try:
        print(f"\nüöÄ ƒêang kh·ªüi t·∫°o chatbot cho user '{user_id}', session '{session_id}'...")
        chatbot = MemoryChatbot(user_id, session_id)
        print("‚úÖ Kh·ªüi t·∫°o th√†nh c√¥ng!")
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi t·∫°o chatbot: {e}")
        return
    
    # Menu ch√≠nh
    while True:
        try:
            show_menu()
            choice = input("Ch·ªçn (1-6): ").strip()
            
            if choice == '1':
                chat_mode(chatbot)
            elif choice == '2':
                show_memory_info(chatbot)
            elif choice == '3':
                search_memory(chatbot)
            elif choice == '4':
                clear_session_memory(chatbot)
            elif choice == '5':
                clear_all_memory(chatbot)
            elif choice == '6':
                print("\nüëã T·∫°m bi·ªát!")
                break
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
                
        except KeyboardInterrupt:
            print("\n\nüëã T·∫°m bi·ªát!")
            break
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")

if __name__ == "__main__":
    main()
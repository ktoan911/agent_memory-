"""
Demo Streamlit App cho Memory Chatbot
"""

import os

import streamlit as st

from chatbot import MemoryChatbot

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Memory Chatbot Demo",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded",
)


def main():
    st.title("Chatbot Demo")

    # Sidebar c·∫•u h√¨nh
    with st.sidebar:
        st.header("‚öôÔ∏è C·∫•u h√¨nh")

        # Ki·ªÉm tra API key
        google_api_key = st.text_input(
            "Google API Key",
            type="password",
            help="Nh·∫≠p Google API Key ƒë·ªÉ s·ª≠ d·ª•ng Gemini",
        )

        if google_api_key:
            os.environ["GOOGLE_API_KEY"] = google_api_key

        # User ID
        user_id = st.text_input(
            "User ID",
            value="toan",
            help="ID ƒë·ªÉ ph√¢n bi·ªát ng∆∞·ªùi d√πng (d√πng ƒë·ªÉ l∆∞u memory ri√™ng bi·ªát)",
        )

        # Session ID
        session_id = st.text_input("Session ID", value="1", help="ID phi√™n tr√≤ chuy·ªán")

        st.divider()

        # Th√¥ng tin memory
        # if st.button("üìä Xem th√¥ng tin Memory"):
        #     if google_api_key:
        #         try:
        #             chatbot = MemoryChatbot(user_id, session_id)
        #             memory_info = chatbot.get_memory_summary()

        #             st.subheader("Th√¥ng tin Memory")
        #             st.json(memory_info)
        #         except Exception as e:
        #             st.error(f"L·ªói: {e}")
        #     else:
        #         st.warning("Vui l√≤ng nh·∫≠p Google API Key")

        # # X√≥a memory
        # if st.button("üóëÔ∏è X√≥a Memory Session"):
        #     if google_api_key:
        #         try:
        #             chatbot = MemoryChatbot(user_id, session_id)
        #             chatbot.clear_session()
        #             st.success("ƒê√£ x√≥a memory session!")
        #         except Exception as e:
        #             st.error(f"L·ªói: {e}")

        # if st.button("üóëÔ∏è X√≥a T·∫•t c·∫£ Memory"):
        #     if google_api_key:
        #         try:
        #             chatbot = MemoryChatbot(user_id, session_id)
        #             chatbot.clear_all_memory()
        #             st.success("ƒê√£ x√≥a t·∫•t c·∫£ memory!")
        #         except Exception as e:
        #             st.error(f"L·ªói: {e}")

    # Main chat interface
    if not google_api_key:
        return

    # Kh·ªüi t·∫°o chatbot
    try:
        if (
            "chatbot" not in st.session_state
            or st.session_state.get("current_user_id") != user_id
        ):
            st.info("Kh·ªüi t·∫°o chatbot...")
            st.session_state.chatbot = MemoryChatbot(user_id, session_id)
            st.session_state.current_user_id = user_id
            st.session_state.messages = []

        chatbot = st.session_state.chatbot

        # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])

        # Chat input
        if prompt := st.chat_input("Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."):
            # Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)

            # T·∫°o ph·∫£n h·ªìi t·ª´ chatbot
            with st.chat_message("assistant"):
                with st.spinner("ƒêang suy nghƒ©..."):
                    try:
                        response = chatbot.chat(prompt)
                        st.markdown(response)
                        st.session_state.messages.append(
                            {"role": "assistant", "content": response}
                        )
                    except Exception as e:
                        error_msg = f"Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra: {str(e)}"
                        st.error(error_msg)
                        st.session_state.messages.append(
                            {"role": "assistant", "content": error_msg}
                        )

        # T√¨m ki·∫øm memory
        # st.divider()
        # st.subheader("üîç T√¨m ki·∫øm Memory")
        # search_query = st.text_input("T√¨m ki·∫øm trong b·ªô nh·ªõ:")
        # if search_query and st.button("T√¨m ki·∫øm"):
        #     try:
        #         search_results = chatbot.search_memory(search_query)
        #         st.text_area("K·∫øt qu·∫£ t√¨m ki·∫øm:", value=search_results, height=200)
        #     except Exception as e:
        #         st.error(f"L·ªói t√¨m ki·∫øm: {e}")

    except Exception as e:
        st.error(f"L·ªói kh·ªüi t·∫°o chatbot: {e}")
        st.info("H√£y ki·ªÉm tra l·∫°i API key v√† th·ª≠ l·∫°i")


if __name__ == "__main__":
    main()
